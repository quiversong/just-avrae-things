embed
<drac2>
using(utils = "efdbdcfa-1fe0-4976-bde0-04c368545d3d")
COMMAND = f'{ctx.prefix}{ctx.alias}'

# Configuration Variables Initialization
IS_LIVE = True
VERSION = '2.0'

VARIABLES = {
    'BIOMES': '7c5af688-854b-416a-90bb-6715de8f46e2',
    'ANIMALS': '1da1ff53-8bbf-485a-a474-ccbebf11a096',
    'MYTHICAL': '7cca9364-ec2c-4d86-9128-2b4b638083c8',
    'DRAGONS': '88cc76ed-a068-4d8c-89c9-56bd8ca621e2'
}

PREY_TYPES = {
    'ANIMAL': 'pta',
    'MYTHICAL': 'ptm',
    'DRAGON': 'ptd'
}

CAMPFIRE_IMAGE = 'https://cdn.discordapp.com/attachments/827581981452795975/827949160514191400/unknown.png'
GOLDEN_COLOR = 'f0b330'

BIOME_IMAGES = {
    'desert': [
        "https://cdn.discordapp.com/attachments/855908840633270282/1162968665986191491/desert4.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162968666439172178/desert5.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162968666720182332/desert6.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162968667047329874/desert7.jpg"
    ],
    'mountain': [
        "https://cdn.discordapp.com/attachments/855908840633270282/1162954002347069620/mountains4.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162954002716180530/mountains3.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162954003383062538/mountains2.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162954003773137016/mountains1.jpg"
    ],
    'forest': [
        "https://cdn.discordapp.com/attachments/855908840633270282/1162972035140554873/forest1.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162972035383820329/forest2.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162972035694215288/forest3.jpg",
        "https://cdn.discordapp.com/attachments/855908840633270282/1162972035971026984/forest4.jpg"
    ],
    'grassland': [],
    'swamp': [],
    'coastline': []
}

DAILY_CAP = 6

# Code
args = &ARGS&
pargs = argparse(args)

output = {
    'title': f'{character().name} goes hunting!',
    'color': '128c2f',
    'desc': None,
    'img': None,
    'thumb': None,
    'footer': '',
    'fields': []
}

SL, FL = "**Success!**", "**Failure!**"

ALIAS_TIME_VAR = "_h_dhc_"
ALIAS_STAGE_VAR = "_h_vars_"
ALIAS_STATS_VAR = "_h_st_"

ADMIN_USER_IDS = [771997367611949076]
if get_svar('SEVENTRA_ALIAS_ADMINS') != None:
    admin_ids = load_json(get_svar('SEVENTRA_ALIAS_ADMINS'))
    ADMIN_USER_IDS += admin_ids

daily_data = utils.get_daily_activity_data(ALIAS_TIME_VAR, DAILY_CAP)
alias_performed_count = daily_data["count"]
wait_text = daily_data["wait_time"]

output['footer'] = f"You have hunted {alias_performed_count}/{DAILY_CAP} times today. | !hunt help\n"
output['footer'] += f'Seventra: Exodus of Heroes | Hunt v{VERSION} | !hunt credits'

# Methods

def get_in_list_by_id(collection, item_id):
    return ([x for x in collection if x['id'] == item_id] + [None])[0]

def get_prey_data(prey_type, prey_id):
    collection = DATA.MYTHICAL if prey_type == PREY_TYPES.MYTHICAL \
            else DATA.DRAGONS if prey_type == PREY_TYPES.DRAGON \
            else DATA.ANIMALS
    return get_in_list_by_id(collection, prey_id)

def get_biome_data(biome_id):
    return get_in_list_by_id(DATA.BIOMES, biome_id)

def parse_prizes_for(prey):
    prizes = {}
    if 'rations' in prey and prey['rations'] > 0:
        prizes['Rations'] = prey['rations']
    if 'prizes' in prey:
      for prize in prey['prizes']:
        prizes[prize['name']] = prize['qt']
    return prizes

def format_prizes_for(prey):
    prizes_list = ''
    if 'rations' in prey and prey['rations'] > 0:
        prizes_list += f'{prey["rations"]}x Rations, '
    if 'prizes' in prey:
      for prize in prey['prizes']:
        prize_name, prize_qt = prize['name'], prize['qt']
        prizes_list += f'{prize_qt}x {prize_name}, '
    prizes_list = prizes_list[:len(prizes_list) - 2]
    return prizes_list

def format_prey_name_with_article(prey_name):
    add_n = "n" if prey_name[0].upper() in "AEIOU" else ""
    return f'a{add_n} {prey_name}'

def format_prey_result_message(prey, message_key, default_message):
    f = ''
    if message_key in prey:
        f += prey[message_key].replace('{char_name}', character().name).replace('{prey_name}', prey['name'])
    else:
        f += default_message
    f += '\n' if '|' in f else '|'
    return f

def increment_stat(stats, stat_name):
    stats[stat_name] = stats[stat_name] + 1 if stat_name in stats else 1

def dump_stats(stats):
    stats.pop('t_dmg') if 't_dmg' in stats else None
    character().set_cvar(ALIAS_STATS_VAR, dump_json(stats))

def update_footer_count(output, new_count):
    current_count = output['footer'].split('/')[0].split(' ')[-1]
    output['footer'] = output['footer'].replace(f'{current_count}/', f'{new_count}/')

def print_stats(output, stats):
    output["title"] = f'{character().name}\'s hunting statistics...'
    if stats == {}:
        output['fields'].append(f'You have no statistics!|Go hunt!')
        return 0
    stats_list = [key.split('_')[1] + (' successes' if key.startswith('s_') else ' total') +
        f': {value}' for key, value in stats.items()]
    output['fields'].append('Your hunt history shows:|' + '\n'.join(stats_list))
    return 0

def is_admin():
    return ctx.author.id in ADMIN_USER_IDS

def reset_state(output):
    if not is_admin():
        err('You are not allowed to do that!')
        return 1
    character().delete_cvar(ALIAS_STAGE_VAR)
    character().delete_cvar(ALIAS_TIME_VAR)
    output['title'] = "Resetting hunting state..."
    output['footer'] = output['footer'].replace(f'{alias_performed_count}/', '0/')
    return 0

def reset_stats(output):
    if not is_admin():
        err('You are not allowed to do that!')
        return 1
    character().delete_cvar(ALIAS_STATS_VAR)
    output["title"] = "Resetting hunt statistics..."
    return 0

def set_next_expected_stage(stage_code, prey_type, prey_id, did_crit = False):
    character().set_cvar(ALIAS_STAGE_VAR, f'{prey_id}:{stage_code}:{prey_type}:{"lastcrit" if did_crit else ""}')

def clear_expected_stage():
    character().delete_cvar(ALIAS_STAGE_VAR)

def handle_wrong_stage(output, prey_type, prey_id, expected_stage):
    prey = get_prey_data(prey_type, prey_id)
    prey_label = 'a different prey' if prey == None else format_prey_name_with_article(prey['name'])
    output['fields'].append(f'Oops! You are already hunting {prey_label}!|Use `!hunt {expected_stage}` to continue.')
    output['thumb'] = image
    return 1

def handle_no_attempts_left(output, wait_text, alias_performed_count, attempts_tried = 1):
    f = ''
    if attempts_tried == 1:
        f += f'{character().name} is exhausted from so much hunting today...|You have to wait {wait_text} until you can hunt again.'
    else:
        f += f'{character().name} is trying to hunt {attempts_tried} more, but you can only do {DAILY_CAP - alias_performed_count}... |You have to wait {wait_text} until you can hunt again.\n'
        f += 'Or use `!hunt <biome>` to hunt just once if you still have attempts left.'
    f += '\n(Hunting resets at midnight UTC)'
    output['fields'].append(f)
    return 1

def biome_selection_screen(output, biome_codes):
    b_list_cmd = "  `!hunt " + "`\n  `!hunt ".join(biome_codes) + "`"
    output['fields'].append(f'Where do you want to go hunting?|Use one of the following:\n{b_list_cmd}')
    output['thumb'] = image
    hunt_images = [
        'https://cdn.discordapp.com/attachments/827581981452795975/830670258897158174/ranger-bow.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676686537228328/colrathisle.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676464062955560/dnd-ranger-5e.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676245288714290/Ranger-1-548x403.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677100431671316/Blue_Bear_Barbarian_and_Cave_Bear.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830674739688243220/7934d073b0f81ff62c673d68a2c41709.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830674397358325811/sJd_IiQBEXsFPg4dkzonDt7zwFvDOO_sI2_02qRMJGFeBK8RWOOz5XnG-_tBEt_LhHVADSbqctdm9rQfb8A7pQeEh_GJ2ZbtHNd3.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677484688375828/tumblr_nxew19kDvy1qhttpto5_1280.jpeg',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677489247453204/daujf32-19437d94-de54-4522-9f9b-e7bc985098b9.jpeg',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677491408437279/pyxbh3nvnur11.jpeg'
    ]
    output['img'] = hunt_images[roll(f'1d{len(hunt_images)}') - 1]
    return 0


# Execution Variables

if (not ALIAS_STATS_VAR in character().cvars) or character().cvars[ALIAS_STATS_VAR] == '':
    stats = {}
else:
    stats = load_json(character().cvars[ALIAS_STATS_VAR])

if len(args) > 0 and args[0] == "stats":
    return print_stats(output, stats)

if len(args) > 0 and args[0] == "reset":
    return reset_state(output)

if len(args) > 0 and args[0] == "resetstats":
    return reset_stats(output)

biomes = load_json(get_gvar(VARIABLES.BIOMES))['biomes']
biome_codes = [b['id'] for b in biomes]

DATA = {
    'BIOMES': biomes,
    'BIOME_CODES': biome_codes,
    'ANIMALS': load_json(get_gvar(VARIABLES.ANIMALS))['animals'],
    'DRAGONS': load_json(get_gvar(VARIABLES.DRAGONS))['dragons'],
    'MYTHICAL': load_json(get_gvar(VARIABLES.MYTHICAL))['mythical']
}


# Execution Methods
def do_explore_biome(stats, biome):
    increment_stat(stats, 't_hunts')

    # try to find a dragon or mythical creature
    special_prey_roll = roll(f'1d{DAILY_CAP * 31}')
    prey_type = PREY_TYPES.ANIMAL
    if special_prey_roll == 1:
        prey_type = PREY_TYPES.MYTHICAL
    if special_prey_roll == 2:
        prey_type = PREY_TYPES.DRAGON

    if prey_type == PREY_TYPES.ANIMAL:
        prey_roll = roll('1d100')
        biome_animals = [(k, v) for k, v in biome['animals'].items()]
        prey_id = [k for k, v in biome_animals if (a_roll == v[0] if len(v) == 1 else prey_roll >= v[0] and prey_roll <= v[1])][0]
        prey = get_prey_data(prey_type, prey_id)
    else:
        prey_list = DATA.DRAGONS if prey_type == PREY_TYPES.DRAGON else DATA.MYTHICAL if prey_type == PREY_TYPES.MYTHICAL else None
        prey = randchoice(prey_list)
        prey_id = prey['id']

    return {
        'prey_type': prey_type,
        'prey_id': prey_id,
        'prey': prey,
        'biome': biome,
        'next_stage': 'sneak',
        'is_special_prey': prey_type != PREY_TYPES.ANIMAL
    }

def do_sneak(stats, prey):
    adv_status = True if pargs.adv() == 1 else False if pargs.adv() == -1 else None
    stealth_roll = vroll(character().skills.stealth.d20(base_adv = adv_status))
    success = stealth_roll.total > prey['pp']

    if success:
        increment_stat(stats, 's_sneak')

    return {
        'success': success,
        'roll': stealth_roll,
        'next_stage': ('commune' if ('commune' in prey and prey['commune']) else 'attack') if success else None
    }

def do_attack(stats, prey_type, prey, weapon_name = None):
    weapon = utils.get_pc_weapon(weapon_name)

    weapon_mod = weapon['a_bonus'] if weapon else (proficiencyBonus + dexterityMod)
    attack_bonus = '+'.join(pargs.get('b', default=[''])).strip()

    attack_die = '2d20kh1' if pargs.adv() == 1 else '2d20kl1' if pargs.adv() == -1 else '1d20'
    attack_die = f'{attack_die} + {weapon_mod}'
    attack_die = f'{attack_die} + {attack_bonus}' if attack_bonus != '' else attack_die

    attack_roll = vroll(attack_die)
    is_crit = attack_roll.result.crit == 1

    attack_success = (is_crit or (is_admin() and 'hb' in pargs)) if prey_type == PREY_TYPES.DRAGON \
            else (is_crit or attack_roll.total >= prey['ac'])

    if attack_success:
        increment_stat(stats, 's_attack')

    return {
        'success': attack_success,
        'roll': attack_roll,
        'is_crit': is_crit,
        'weapon': weapon,
        'next_stage': 'clean' if attack_success else None
    }

def do_clean(stats, prey, all_bags = None):
    adv_status = True if last_stage_was_crit else None
    survival_roll = vroll(character().skills.survival.d20(base_adv = adv_status))

    success = survival_roll.total >= prey['clean_dc']

    if success:
        increment_stat(stats, 's_clean')

        prizes = parse_prizes_for(prey)
        prizes_list = format_prizes_for(prey)

        utils.add_to_bag('Hunting', prizes, all_bags)
    return {
        'success': success,
        'roll': survival_roll,
        'prizes_list': prizes_list if success else None
    }

def do_commune(stats, prey, all_bags = None):
    if (not 'commune' in prey) or prey['commune'] == False or (not 'cha' in prey):
        err('!hunt script rolled a 1 and failed flat on its head! Please report to a Server Administrator.')
        return 1

    if ctx.author.id in ADMIN_USER_IDS and 'hb' in pargs:
        roll_bonus = '+ '.join(pargs.get('hb', default=[''])).strip()
    else:
        roll_bonus = ''
    ah_roll = vroll(character().skills.animalHandling.d20() + roll_bonus)
    success = ah_roll.total >= prey['cha']

    if success:
        increment_stat(stats, 's_commune')

        prizes = parse_prizes_for(prey)
        prizes_list = format_prizes_for(prey)

        utils.add_to_bag('Hunting', prizes, all_bags)

    return {
        'success': success,
        'roll': ah_roll,
        'prizes_list': prizes_list if success else None
    }

# Begin Execution

# read stage variable
prey = None
prey_id = None
prey_type = None
expected_stage = None
last_stage_was_crit = False

if ALIAS_STAGE_VAR in character().cvars:
    hvars = character().cvars[ALIAS_STAGE_VAR].split(":")
    prey_id = hvars[0]
    expected_stage = hvars[1]
    prey_type = hvars[2]

    prey = get_prey_data(prey_type, prey_id)
    if 'commune' in prey and prey['commune']:
        output['color'] = GOLDEN_COLOR

    if len(hvars) > 3 and hvars[3] == 'lastcrit':
        last_stage_was_crit = True

in_wrong_stage = expected_stage and (len(args) == 0 or (len(args) > 0 and expected_stage != args[0]))
quitting_hunt = expected_stage == 'attack' and len(args) > 0 and args[0] == 'quit'
if (in_wrong_stage and not quitting_hunt):
    return handle_wrong_stage(output, prey_type, prey_id, expected_stage)

if (len(args) == 0 or (not expected_stage and args[0] not in biome_codes)):
    return biome_selection_screen(output, biome_codes)

first_param = args[0]

# From here on, player must still have hunt attempts available
if alias_performed_count >= DAILY_CAP:
    return handle_no_attempts_left(output, wait_text, alias_performed_count)


if ('quick' in pargs) and first_param in biome_codes:
    count = DAILY_CAP - alias_performed_count
    alias_performed_count = utils.increase_daily_activity_data(ALIAS_TIME_VAR, count)
    update_footer_count(output, alias_performed_count)

    biome_id = first_param
    biome = get_biome_data(biome_id)
    all_bags = load_json(character().cvars['bags'])

    def format_roll_result(roll_name, roll, success):
        return f'{":white_check_mark:" if success else ":x:"} {roll_name} roll: {roll.full}'

    rewards_gained = False
    special_creature_found = False

    for _ in range(0, count):
        f = ''

        result = do_explore_biome(stats, biome)
        prey = result['prey']
        prey_type = result['prey_type']

        formatted_prey_name = f'a VERY RARE {prey["name"]}' if result['is_special_prey'] \
                else format_prey_name_with_article(prey['name'])
        f += f'You found {formatted_prey_name}...|'

        result = do_sneak(stats, prey)
        f += format_roll_result('Stealth', result['roll'], result['success'])

        if result['next_stage'] == 'attack':
            result = do_attack(stats, prey_type, prey)
            f += '\n' + format_roll_result('Attack', result['roll'], result['success']) + (' **Crit!**' if result['is_crit'] else '')
            if result['success']:
                result = do_clean(stats, prey, all_bags)
                f += '\n' + format_roll_result('Survival', result['roll'], result['success'])
        elif result['next_stage'] == 'commune':
            special_creature_found = True
            result = do_commune(stats, prey, all_bags)
            f += '\n' + format_roll_result('Animal Handling', result['roll'], result['success'])

        if 'prizes_list' in result and result['prizes_list'] != None:
            f += f'\n:coin: *{result["prizes_list"]}*'
            rewards_gained = True

        output.fields.append(f)

    if rewards_gained:
        output.fields.append('A plentiful day!|Your rewards have been added to your "Hunting" bag.')
    else:
        output.fields.append('A meager day...|Better luck next time!')

    if special_creature_found:
        output['color'] = GOLDEN_COLOR

    output['desc'] = f'*Exploring the {biome["name"]} environment...*'
    output['img'] = randchoice(BIOME_IMAGES[biome_id])
    dump_stats(stats)
    return 0

# Begin new hunt
if not('quick' in pargs) and first_param in biome_codes:
    alias_performed_count = utils.increase_daily_activity_data(ALIAS_TIME_VAR)
    update_footer_count(output, alias_performed_count)

    biome_id = first_param
    biome = get_biome_data(biome_id)

    result = do_explore_biome(stats, biome)
    prey = result['prey']

    if result['is_special_prey']:
        f = f'{character().name} found a ***VERY RARE*** {prey["name"]}!|Can you approach it without being noticed?'
        output.fields.append(f)
        output['color'] = GOLDEN_COLOR
    else:
        f = f'{character().name} found {format_prey_name_with_article(prey["name"])} in the {biome["name"]}!|Can you get the jump on it?'
        output.fields.append(f)

    output['thumb'] = biome['img']
    output.fields.append(f'This hunt is not over yet...|Use `!hunt sneak` to continue.')

    set_next_expected_stage(result['next_stage'], result['prey_type'], result['prey_id'])
    dump_stats(stats)
    return 0

if first_param == 'sneak':
    c = character()
    output['title'] = f'{c.name} tries to sneak on their prey!'

    result = do_sneak(stats, prey)

    f = f'{c.name} closes on the {prey["name"]}...|**Stealth roll:** {result["roll"].full}'
    f += f'\n{SL if result["success"] else FL}'
    output.fields.append(f)

    is_commune_target = result['next_stage'] == 'commune'
    if result['success']:
        if is_commune_target:
            f = format_prey_result_message(prey, 'sneak_succ', f'The {prey["name"]} has seen you, but they do not seem scared.')
            f += f'Will the {prey["name"]} accept your approach?'
            output.fields.append(f)
            f = f'This hunt is not over yet...|Use `!hunt commune` to try to commune with the {prey["name"]}.'
            output.fields.append(f)
        else:
            f = f'The {prey["name"]} has not seen you!|Can you take it down?'
            output.fields.append(f)
            f = 'This hunt is not over yet...|Use `!hunt attack` or `!hunt attack [weapon]` to attack your prey!'
            f += '\nAlternatively, use `!hunt quit` if you would rather not harm this prey.'
            output.fields.append(f)

        output['thumb'] = prey['img']
        set_next_expected_stage(result['next_stage'], prey_type, prey_id)
    else:
        f = format_prey_result_message(prey, 'sneak_fail', f'You lost sight of the {prey["name"]}...')
        output.fields.append(f)
        output.fields.append('Better luck next time!|You can use `!hunt` to try again.')

        output['thumb'] = image
        clear_expected_stage()

    dump_stats(stats)
    return 0

if first_param == 'quit':
    output['title'] = f'{character().name} quits hunting the {prey["name"]}!'
    f = f'You lose sight of the {prey["name"]}.|But you spend some time admiring the beauty of the nature around you.'
    f += '\nIt is magnificent!'
    clear_expected_stage()
    dump_stats(stats)
    return 0

if first_param == 'attack':
    c = character()

    weapon_name = args[1].lower() if (len(args) > 1 and len(args[1]) >= 3 and args[1] not in ["adv", "dis", "-b", "-d"]) else None
    result = do_attack(stats, prey_type, prey, weapon_name)
    weapon = result['weapon']

    output['title'] = f'{c.name} attacks their prey{" with their " + weapon["name"] if weapon != None else ""}!'

    f = f'Was {c.name} able to kill the {prey["name"]}?|**Attack roll:** {result["roll"].full}\n'
    f += '**Miss!**' if not result['success'] else '**Critical Hit!**' if result['is_crit'] else '**Success!**'
    output.fields.append(f)

    if result['success']:
        output['thumb'] = prey['img']
        if result['is_crit']:
            f = f'{c.name} hit a critical hit killing the {prey["name"]} on the spot!'
        else:
            f = f'{c.name} manages to kill the {prey["name"]}.'
        f += '|Can you clean your prize and collect the good?'
        output.fields.append(f)
        output.fields.append('This hunt is not over yet...|Use `!hunt clean` to try to clean your kill.')
        set_next_expected_stage(result['next_stage'], prey_type, prey_id, result['is_crit'])
    else:
        output['thumb'] = image
        output.fields.append(f'The {prey["name"]} managed to escape your attack and flee...|Better luck next time!')
        clear_expected_stage()

    dump_stats(stats)
    return 0

if first_param == 'clean':
    c = character()
    output['title'] = f'{c.name} attempts to clean their hunting prize!'

    result = do_clean(stats, prey)

    f = f'{c.name} cleans and extracts the goods from the {prey["name"]}...|'
    f += f'**Survival roll:** {result["roll"].full}\n{SL if result["success"] else FL}'
    output.fields.append(f)

    if result['success']:
        output['img'] = prey['img']
        output.fields.append(f'You gained: {result["prizes_list"]}.|They have been added to your "Hunting" bag!')
    else:
        output['thumb'] = CAMPFIRE_IMAGE
        output.fields.append(f'You ended up wasting the prey you caught...|Better luck next time!')

    clear_expected_stage()
    dump_stats(stats)
    return 0

if first_param == 'commune':
    c = character()
    output['title'] = f'{c.name} tries to commune with the {prey["name"]}...'

    result = do_commune(stats, prey)

    f = f'{c.name} approaches the {prey["name"]}...|'
    f += f'**Animal Handling roll:** {result["roll"].full}\n{SL if result["success"] else FL}'
    output.fields.append(f)

    if result['success']:
        output['img'] = prey['img']
        f = format_prey_result_message(prey, 'commune_succ', f'The {prey["name"]} runs away, but the experience enlightens you...')
        f += f'You gained: {result["prizes_list"]}.\nThey have been added to your "Hunting" bag!'
        output.fields.append(f)
    else:
        output['thumb'] = prey['img']
        f = format_prey_result_message(prey, 'commune_fail', f'The {prey["name"]} ran away unexpectedly!')
        f += 'Better luck next time!'
        output.fields.append(f)

    clear_expected_stage()
    dump_stats(stats)
    return 0

dump_stats(stats)
</drac2>
-title "{{output['title']}}"
{{f'-image "{output["img"]}"' if output["img"] else ""}}
{{f'-desc "{output["desc"]}"' if output["desc"] else ""}}
{{f'-thumb "{output["thumb"]}"' if output["thumb"] else ""}}
{{f'-color "{output["color"]}"' if output["color"] else ""}}
{{f'-footer "{output["footer"]}"' if output["footer"] else ""}}
{{''.join(['-f "' + field + '"\n' for field in output['fields']]) if len(output['fields']) > 0 else ''}}
