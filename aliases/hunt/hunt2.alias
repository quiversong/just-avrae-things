embed
<drac2>
using(utils = "efdbdcfa-1fe0-4976-bde0-04c368545d3d")
COMMAND = f'{ctx.prefix}{ctx.alias}'

# Configuration Variables Initialization
IS_LIVE = True
VERSION = '2.0'

VARIABLES = {
    'BIOMES': '7c5af688-854b-416a-90bb-6715de8f46e2',
    'ANIMALS': '1da1ff53-8bbf-485a-a474-ccbebf11a096',
    'MYTHICAL': '7cca9364-ec2c-4d86-9128-2b4b638083c8',
    'DRAGONS': '88cc76ed-a068-4d8c-89c9-56bd8ca621e2'
}

PREY_TYPES = {
    'ANIMAL': 1,
    'MYTHICAL': 2,
    'DRAGON': 3
}

SPECIAL_CREATURE_DIE = 200

DAILY_CAP = 6

# Code
args = &ARGS&
pargs = argparse(args)
c = character()
cv = c.cvars
cs = c.skills

output = { 'title': f'{c.name} goes hunting!', 'img': None, 'thumb': None, 'color': '128c2f', 'footer': '', 'fields': [] }

SL, FL = "**Success!**", "**Failure!**"

ALIAS_TIME_VAR = "_h_dhc_"
ALIAS_STAGE_VAR = "_h_vars"
ALIAS_STATS_VAR = "_h_st_"

ADMIN_USER_IDS = [771997367611949076]
if get_svar('SEVENTRA_ALIAS_ADMINS') != None:
    admin_ids = load_json(get_svar('SEVENTRA_ALIAS_ADMINS'))
    ADMIN_USER_IDS += admin_ids

daily_data = utils.get_daily_activity_data(ALIAS_TIME_VAR, DAILY_CAP)
alias_performed_count = daily_data["count"]
wait_time = daily_data["wait_time"]
wait_text = daily_data["wait_text"]

output['footer'] = f"You have hunted {alias_performed_count}/{DAILY_CAP} times today. | !hunt help\n"
output['footer'] += f'Seventra: Exodus of Heroes | Hunt v{VERSION} | !hunt credits'

# Methods


def get_prey_data(preys, prey_id):
    return preys[prey_id] if prey_id in preys else None

def format_prey_name_with_article(prey):
    prey_name = prey["name"]
    add_n = "n" if prey_name[0].upper() in "AEIOU" else ""
    return f'a{add_n} {prey_name}'

def increment_stat(stats, stat_name):
    stats[stat_name] = stats[stat_name] + 1 if stat_name in stats else 1

def dump_stats(stats):
    character().set_cvar(ALIAS_STATS_VAR, dump_json(stats))

def update_footer_count(output, new_count):
    output['footer'] = output['footer'].replace(f'{new_count - 1}/', f'{new_count}/')

def print_stats(output, stats):
    output["title"] = f'{c.name}\'s hunting statistics...'
    if stats == {}:
        output['fields'].append(f'You have no statistics!|Go hunt!')
        return 0
    stats_list = [key.split('_')[1] + (' successes' if key.startswith('s_') else ' total') +
        f': {value}' for key, value in stats.items()]
    output['fields'].append('Your hunt history shows:|' + '\n'.join(stats_list))
    return 0

def reset_state(output):
    if not ctx.author.id in ADMIN_USER_IDS:
        err('You are not allowed to do that!')
        return 1
    character().delete_cvar(ALIAS_STAGE_VAR)
    character().delete_cvar(ALIAS_TIME_VAR)
    output['title'] = "Resetting hunting state..."
    output['footer'] = output['footer'].replace(f'{alias_performed_count}/', '0/')
    return 0

def reset_stats(output):
    if not ctx.author.id in ADMIN_USER_IDS:
        err('You are not allowed to do that!')
        return 1
    character().delete_cvar(ALIAS_STATS_VAR)
    output["title"] = "Resetting hunt statistics..."
    return 0

def set_next_expected_stage(prey_id, stage_code, prey_type):
    character().set_cvar(ALIAS_STAGE_VAR, f'{prey_id}:{stage_code}:{prey_type}')

def handle_wrong_stage(output, prey_id, expected_stage):
    prey = get_prey_data(prey_id)
    prey_label = 'a different prey' if prey == None else format_prey_name_with_article(prey)
    output['fields'].append(f'Oops! You are already hunting {prey_label}!|Use `!hunt {expected_stage}` to continue.')
    output['thumb'] = image
    return 1

def handle_no_attepts_left(output, wait_text, alias_performed_count, attempts_tried = 1):
    f = ''
    if attempts_tried == 1:
        f += f'{c.name} is exhausted from so much hunting today...|You have to wait {wait_text} until you can hunt again.'
    else:
        f += f'{c.name} is trying to hunt {attempts_tried} more, but you can only do {DAILY_CAP - alias_performed_count}... |You have to wait {wait_text} until you can hunt again.\n'
        f += 'Or use `!hunt <biome>` to hunt just once if you still have attempts left.'
    f += '\n(Hunting resets at midnight UTC)'
    output['fields'].append(f)
    return 1

def biome_selection_screen(output, biome_codes):
    b_list_cmd = "  `!hunt " + "`\n  `!hunt ".join(biome_codes) + "`"
    output['fields'].append(f'Where do you want to go hunting?|Use one of the following:\n{b_list_cmd}')
    output['thumb'] = image
    hunt_images = [
        'https://cdn.discordapp.com/attachments/827581981452795975/830670258897158174/ranger-bow.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676686537228328/colrathisle.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676464062955560/dnd-ranger-5e.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830676245288714290/Ranger-1-548x403.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677100431671316/Blue_Bear_Barbarian_and_Cave_Bear.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830674739688243220/7934d073b0f81ff62c673d68a2c41709.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830674397358325811/sJd_IiQBEXsFPg4dkzonDt7zwFvDOO_sI2_02qRMJGFeBK8RWOOz5XnG-_tBEt_LhHVADSbqctdm9rQfb8A7pQeEh_GJ2ZbtHNd3.png',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677484688375828/tumblr_nxew19kDvy1qhttpto5_1280.jpeg',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677489247453204/daujf32-19437d94-de54-4522-9f9b-e7bc985098b9.jpeg',
        'https://cdn.discordapp.com/attachments/827581981452795975/830677491408437279/pyxbh3nvnur11.jpeg'
    ]
    output['img'] = hunt_images[roll(f'1d{len(hunt_images)}') - 1]
    return 0


# Execution Variables

prey_id = None
expected_stage = None
last_stage_was_crit = False

if not ALIAS_STATS_VAR in cv:
    stats = {}
else:
    stats = load_json(ALIAS_STATS_VAR)

if len(args) > 0 and args[0] == "stats":
    return print_stats(output, stats)

if len(args) > 0 and args[0] == "reset":
    return reset_state(output)

if len(args) > 0 and args[0] == "resetstats":
    return reset_stats(output)

biomes = load_json(get_gvar(VARIABLES.BIOMES))['biomes']
biome_codes = [b['id'] for b in biomes]

first_param = args[0]

ALL_DATA = {
    'BIOMES': biomes,
    'BIOME_CODES': biome_codes,
    'ANIMALS': load_json(get_gvar(VARIABLES.ANIMALS))['animals'],
    'DRAGONS': load_json(get_gvar(VARIABLES.DRAGONS))['dragons'],
    'MYTHICAL': load_json(get_gvar(VARIABLES.MYTHICAL))['mythical']
}

# From here on, player must still have hunt attempts available
if alias_performed_count >= DAILY_CAP:
    return handle_no_attepts_left(output, wait_text, alias_performed_count)

if ALIAS_STAGE_VAR in cv:
    hvars = cv[ALIAS_STAGE_VAR].split(":")
    prey_id = hvars[0]
    expected_stage = hvars[1]
    if len(hvars) > 2 and hvars[2] == 'lastcrit':
        last_stage_was_crit = True

in_wrong_stage = expected_stage and (len(args) == 0 or (len(args) > 0 and expected_stage != args[0]))
quitting_hunt = expected_stage == 'attack' and len(args) > 0 and args[0] == 'quit'
if (in_wrong_stage and not quitting_hunt):
    return handle_wrong_stage(output, prey_id, expected_stage)

if (len(args) == 0 or (not expected_stage and args[0] not in biome_codes)):
    return biome_selection_screen(output, biome_codes)


# Execution Methods
def create_state(name, run, params, is_last = False):
    return {
        'name': name,
        'params': params,
        'is_last': is_last,
        'run': run
    }

def do_explore_biome(stats, output, biome_id):
    increment_stat(stats, 't_hunts')

    biome = ALL_DATA.BIOMES[biome_id]

    # try to find a dragon or mythical creature
    special_prey_roll = roll(f'1d{DAILY_CAP * 31}')
    prey_type = PREY_TYPES.ANIMAL
    if special_prey_roll == 1:
        prey_type = PREY_TYPES.MYTHICAL
    if special_prey_roll == 2:
        prey_type = PREY_TYPES.DRAGON

    if prey_type == PREY_TYPES.ANIMAL:
        prey_roll = roll('1d100')
        biome_animals = [(k, v) for k, v in biome['animals'].items()]

        prey_id = [k for k, v in biome_animals if (a_roll == v[0] if len(v) == 1 else prey_roll >= v[0] and prey_roll <= v[1])]
        prey = ALL_DATA.ANIMALS[prey_id]
    else:
        prey_list = DATA.DRAGONS if prey_type == PREY_TYPES.DRAGON else DATA.MYTHICAL if prey_type == PREY_TYPES.MYTHICAL

        prey = randchoice(prey_list)
        prey_id = prey['id']

    return {
        'prey_type': prey_type,
        'prey_id': prey_id,
        'prey': prey,
        'biome': biome
    }

def do_sneak(stats, output):
    output = params['output']
    prey_id = params['prey_id']

    animal = DATA.ANIMALS[prey_id]
    animal_name = animal["name"]

    adv_status = True if pargs.adv() == 1 else False if pargs.adv() == -1 else None

    stealth_roll = vroll(character().skills.stealth.d20(base_adv = adv_status))
    success = stealth_roll.total > animal["pp"]

    params.output.title = f'{c.name} tries to sneak on their prey!'
    f = f'{c.name} closes on the {animal_name}...|**Stealth roll:** {stealth_roll.full}\n{SL if success else FL}'
    if success:
        thumb = animal["img"]
        increment_stat(stats, 's_sneak')
        f = f'The {anm_name} has not seen you!|Now use `!hunt attack` or `!hunt attack [weapon]` to attack your prey!'
        f += "\nAlternatively use `!hunt quit` if you would rather not hunt this prey."
        output.fields.append(f)

        return create_state('attack', do_attack, { 'output': output, 'prey_id': prey_id, 'prey_type': PREY_TYPES.ANIMAL })
    else:
      thumb = image
      if "sneak_fail" in animal:
          f2 = anm["sneak_fail"].replace('{prey_name}', animal_name)
      else:
          f2 = f'You lost sight of the {animal_name}...'
      f2 += '\n' if '|' in f2 else '|'
      f2 += 'Better luck next time! Use `!hunt` to try again.'
      c.delete_cvar(HUNT_STAGE_VAR)

# Begin Execution

# Begin new hunt
if not('quick' in params) and first_param in biome_codes:
    alias_performed_count = utils.increase_daily_activity_data(ALIAS_TIME_VAR)
    update_footer_count(output, alias_performed_count)

    thumb = biome['img']

    biome_id = first_param
    result = do_explore_biome(stats, output, biome_id)

    if result['prey_type'] == PREY_TYPES.ANIMAL:
        f = f'{c.name} found a{format_prey_name_with_article(prey["name"])} in the {biome["name"]}!|Use `!hunt sneak` to try and get the jump on it.'
        output.fields.append(f)
    else:
        f = f'{c.name} found a ***VERY RARE*** {prey["name"]}!|Use `!hunt sneak` to try to approach it without being noticed.'
        output.fields.append(f)
        color = 'f0b330'

    set_next_expected_stage(prey_id, 'sneak', prey_type)
    dump_stats(stats)
    return 0


if first_param == 'sneak':
    do_sneak(stats, output)

dump_stats(stats)
</drac2>
-title "{{output['title']}}"
{{f'-image "{output["img"]}"' if output["img"] else ""}}
{{f'-thumb "{output["thumb"]}"' if output["thumb"] else ""}}
{{f'-color "{output["color"]}"' if output["color"] else ""}}
{{f'-footer "{output["footer"]}"' if output["footer"] else ""}}
{{''.join(['-f "' + field + '"\n' for field in output['fields']]) if len(output['fields']) > 0 else ''}}
