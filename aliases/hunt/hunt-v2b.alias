embed <drac2> # Configuration Variables
IS_LIVE = False
VERSION = '2.0.b.BETA'

BETA_VAR = "814404c1-670c-4849-84f8-13fb3493f6b9"
LIVE_VAR = "73c3a5c7-b789-4dcd-a154-a01b58bf1b8a"

DRAGON_DIE = 101
DRAGON_VAR = "3f0c7f42-7712-4e86-8252-df4782f64c98"
ANIMAL_VAR_A = "e93be9b6-b00f-47bb-8d63-a8c5efd8d32a"
ANIMAL_VAR_B = "2c1f2eec-3149-48c7-b303-083b2152fbb1"
ANIMAL_VAR_C = "465ae586-4497-4f7e-b760-c0819b21bd9b"
MYTHIC_VAR_1 = "39caaf43-ae11-4a8e-9f8b-d5cd62c3ddd3"

DAILY_CAP = 6

# Code
args = &ARGS&
pargs = argparse(args)
c = character()
cv, cs = c.cvars, c.skills

#data_var = LIVE_VAR if IS_LIVE else BETA_VAR
hunt_daily_cap = DAILY_CAP

t = f'{c.name} goes hunting!'
f, f2, color = None, None, '128c2f'

img = None
thumb = None
sl, fl = "**Success!**", "**Failure!**"

hunt_count = 0
first_hunt_time = None
wait_time = None
wait_text = None

HUNT_TIME_VAR = "_h_dhc_"
HUNT_STAGE_VAR = "_h_vars"
HUNT_STATS_VAR = "_h_st_"

if HUNT_TIME_VAR in cv:
  var_parts = cv[HUNT_TIME_VAR].split(':')
  hunt_count = int(var_parts[0])
  first_hunt_time = float(var_parts[1])

  now = time()
  if hunt_count > 0 and first_hunt_time != None:
    passed_in_day_of_first_hunt = first_hunt_time % 86400
    next_midnight_after_first_hunt = first_hunt_time + (86400 - passed_in_day_of_first_hunt)
    if now > next_midnight_after_first_hunt:
      c.delete_cvar(HUNT_TIME_VAR)
      hunt_count, first_hunt_time = 0, None
    elif hunt_count >= hunt_daily_cap:
      wait_time = next_midnight_after_first_hunt - now
      hours = floor(wait_time / 3600)
      minutes = 0
      if hours == 0:
        minutes = ceil(wait_time / 60)
      else:
        minutes = ceil((wait_time % 3600) / 60)
      wait_text = (str(hours) + ' hours and ' if hours > 0 else '') + str(minutes) + ' minutes'

footer = f"You have hunted {hunt_count}/{hunt_daily_cap} times today. | !hunt help\n"
footer += f'Seventra: Exodus of Heroes | Hunt v{VERSION} | !hunt credits'

hvars, prey_id, stage, last_stage_was_crit = None, None, None, None
last_stage_was_crit = False
if HUNT_STAGE_VAR in cv:
  hvars = cv[HUNT_STAGE_VAR].split(":")
  prey_id = hvars[0]
  stage = hvars[1]
  if len(hvars) <= 2:
    t = f'Welcome to Hunt!'
    f = f'**Loading v2b (BETA VERSION)**\nYour progress from hunt v1 has been removed.\nRun `!!hunt` to begin testing.'
    c.delete_cvar(HUNT_STAGE_VAR)
    return 2
  else:
    last_stage_was_crit = True if len(hvars) > 3 and hvars[3] == 'lastcrit' else False
    pursuit_round = True if len(hvars) > 2 and int(hvars[2]) > 1 else False

if not HUNT_STAGE_VAR in cv:
  attempt_number = 1
else:
  attempt_number = int(hvars[2]) if hvars[2].isnumeric() else hvars[2]

if IS_LIVE == False:
  hvar_before = f'\nNote: {hvars}' if HUNT_STAGE_VAR in cv else f'\nNote: hvars empty'
else:
  hvar_before = None

if not HUNT_STATS_VAR in cv:
  stats = {}
  c.set_cvar(HUNT_STATS_VAR, dump_json(stats))
else:
  stats = load_json(cv["_h_st_"])

if len(args) > 0 and args[0] == "stats":
  t = f'{c.name}\'s hunting statistics...'
  if stats == {}:
    f = f'You have no statistics!|Go hunt!'
    return 0
  stats_list = [key.split('_')[1] + (' successes' if key.startswith('s_') else ' total') +
      f': {value}' for key, value in stats.items()]
  f = 'Your hunt history shows:|' + '\n'.join(stats_list)
  return 0

if len(args) > 0 and args[0] == "reset":
  footer += hvar_before
  c.delete_cvar(HUNT_STAGE_VAR)
  c.delete_cvar(HUNT_TIME_VAR)
  t = "Resetting hunting state..."
  footer = footer.replace(f'{hunt_count}/', '0/')
  return 0

if len(args) > 0 and args[0] == "resetstats":
  c.delete_cvar(HUNT_STATS_VAR)
  t = "Resetting hunt statistics..."
  return 0

data = load_json(get_gvar(LIVE_VAR)) if IS_LIVE else load_json(get_gvar(BETA_VAR))
dragon_data = load_json(get_gvar(DRAGON_VAR))
a_data_a = load_json(get_gvar(ANIMAL_VAR_A))
a_data_b = load_json(get_gvar(ANIMAL_VAR_B))
a_data_c = load_json(get_gvar(ANIMAL_VAR_C))
a_data_My = load_json(get_gvar(MYTHIC_VAR_1))

biomes = data["biomes"]
animals = a_data_a["animals"] | a_data_b["animals"] | a_data_c["animals"] | a_data_My["animals"]
hunt_images = list(data["images"].values())

#STAGE OPTIONS
if stage and stage in ["sneak","pursue"] and len(args) > 0:
  stage = "track" if "track" in args[0] else "sneak" if "sneak" in args[0] else hvars[1]
#if stage and stage in ["attack","pursue"] and len(args) > 0 and args[0] == "tame":
#  stage = "tame"

#WRONG STAGE AND QUIT
in_wrong_stage = stage and (len(args) == 0 or (len(args) > 0 and stage != args[0]))
quitting_hunt = stage and stage in ["attack","pursue"] and len(args) > 0 and args[0] == 'quit'
if (in_wrong_stage and not quitting_hunt):
  anm = animals[prey_id]
  anm_name = anm["name"]
  add_n = "n" if anm["name"][0] in "AEIOU" else ""
  f = f'Oops! You are already hunting a{add_n} {anm_name}!|Use `!hunt {stage}` to continue.'
  thumb = image
  return 1

ACCEPTED_DIFFICULTIES = ["easy","hard","legends"]

if (len(args) == 0 or (not stage and args[0] not in ACCEPTED_DIFFICULTIES)):
  d_list_cmd = "  `!hunt " + "`\n  `!hunt ".join(ACCEPTED_DIFFICULTIES) + "`"
  f = f'Where do you want to go hunting?|Use one of the following:\n{d_list_cmd}'
  thumb = image
  img = randchoice(hunt_images)
  return 0

BIOME_BY_CHANNEL_ID = {
    999791496444268655: "test1",
    833229819335409664: "test1",
    976126242141122580: "test2",
    861654042317029426: "arbarax",
    965727258507640832: "hydris",
    830682853373247488: "mossfort",
    861658628850057296: "nephix",
    861665071080276008: "snowcrest",
    861668091993260072: "valinor",
    922269788485599322: "travel",
    922269909101191219: "travel",
    922270001837264936: "travel",
    930614670455349290: "travel",
    930615138757779466: "travel"
}

p = args[0]

if p in ACCEPTED_DIFFICULTIES:
  if wait_time != None:
    f = f'{c.name} is exhausted from so much hunting today...|You have to wait {wait_text} until you can hunt again.'
    f += '\n(Hunting resets at midnight UTC)'
    return 1

  region = ([x[1] for x in BIOME_BY_CHANNEL_ID.items() if ctx.channel.id == x[0]] + ["general"])[0]
  challenge = p
  chosen_biome = f"{region}_{challenge}"
  biome = biomes[chosen_biome]

  hunt_count += 1
  stats["t_hunts"] = stats["t_hunts"] + 1 if "t_hunts" in stats else 1

  first_hunt_time = time() if hunt_count == 1 else first_hunt_time
  c.set_cvar(HUNT_TIME_VAR, f'{hunt_count}:{first_hunt_time}')
  footer = footer.replace(f'{hunt_count - 1}/', f'{hunt_count}/')

  thumb = biome["image"]
  noprey_message = f'{c.name} could not find any prey.|Better luck next time!'

  a_roll = roll("1d100")
  if not "animal_chance" in biome:
    f = noprey_message
    c.set_cvar(HUNT_STATS_VAR, dump_json(stats))
    return 0

  b_anms = [(k, v) for k, v in biome["animal_chance"].items()]
  anm_indicator = [k for k, v in b_anms if (a_roll == v[0] if len(v) == 1 else a_roll >= v[0] and a_roll <= v[1])]
  if len(anm_indicator) == 0:
    f = noprey_message
    c.set_cvar(HUNT_STATS_VAR, dump_json(stats))
    return 0

  is_dragon_roll = roll(f'1d{DRAGON_DIE}')
  is_dragon = is_dragon_roll == DRAGON_DIE
  if is_dragon:
    dragon_types = dragon_data["biomes"][p]
    dragon_type = dragon_types[roll(f'1d{len(dragon_types)}') - 1]
    commune_or_battle = 'commune' if roll('1d2') == 1 else 'battle'
    anm_id = f'dragon-{dragon_type}-{commune_or_battle}'
    anm = dragon_data["dragons"][anm_id]
  else:
    anm_id = anm_indicator[0]
    if anm_id in a_data_a["animals"]:
        anm = a_data_a["animals"][anm_id]
    elif anm_id in a_data_b["animals"]:
        anm = a_data_b["animals"][anm_id]
    elif anm_id in a_data_c["animals"]:
        anm = a_data_c["animals"][anm_id]
    elif anm_id in a_data_My["animals"]:
        anm = a_data_My["animals"][anm_id]


  add_n = "n" if anm["name"][0] in "AEIOU" else ""
  footer += hvar_before
  c.set_cvar(HUNT_STAGE_VAR, f'{anm_id}:sneak:{attempt_number}')
  
  if ("commune" in anm and anm["commune"] == True) or is_dragon:
    color = 'f0b330'
    f = f'{c.name} found a ***VERY RARE*** {anm["name"]}!|Do you...\n...try to approach unnoticed? `!hunt sneak`\n...follow it from a distance? `!hunt track`'
  else:
    f = f'{c.name} found a{add_n} {anm["name"]} in the {biome["name"]}!|Do you...\n ...sneak up on it? `!hunt sneak`\n...follow its trail? `!hunt track`'
  c.set_cvar(HUNT_STATS_VAR, dump_json(stats))
  return 0

anm = dragon_data["dragons"][prey_id] if prey_id.startswith('dragon-') else animals[prey_id]
anm_name = anm["name"]

add_to_bag = None

ac_scale = ceil(ceil(ceil(anm["cr"]) / 5) * ceil(attempt_number - 1))
kc_scale = ceil(ceil(ceil(anm["cr"]) / 5) * ceil(attempt_number - 1))
if "commune" in anm and anm["commune"] == True:
    color = 'f0b330'
    adaptive_pp = ceil(anm["pp"] + ceil(int(attempt_number) - 1)) if pursuit_round else anm["pp"]
    adaptive_cha = ceil(anm["cha"] + ceil(int(attempt_number) - 1)) if pursuit_round else anm["cha"]
else:
    if pursuit_round:
        ac_change = ac_scale if ac_scale > 1 else 1
        kc_change = kc_scale if kc_scale > 1 else 1
        adaptive_ac = ceil(anm["ac"] + ac_change) if ceil(anm["ac"] + ac_change) <= anm["kc"] else anm["ac"]
        adaptive_kc = ceil(anm["kc"] - kc_change) if ceil(anm["kc"] - kc_change) >= adaptive_ac else adaptive_ac
        adaptive_pp = ceil(anm["pp"] - ceil(int(attempt_number) - 1)) if ceil(anm["pp"] - ceil(int(attempt_number) - 1)) >= 3 else 3
    else:
        adaptive_ac = anm["ac"]
        adaptive_kc = anm["kc"]
        adaptive_pp = anm["pp"]
    adaptive_cha = anm["cha"] if "cha" in anm else 0


if "pp" in anm:
  if adaptive_pp == anm["pp"]:
    adaptive_pp_math = f' `{adaptive_pp}`'
  elif adaptive_pp > anm["pp"]:
    adaptive_pp_math = f' *{anm["pp"]} + {adaptive_pp - anm["pp"]} =* `{adaptive_pp}`'
  else:
    adaptive_pp_math = f' *{anm["pp"]} - {anm["pp"] - adaptive_pp} =* `{adaptive_pp}`'

if "cha" in anm:
  if adaptive_cha == anm["cha"]:
    adaptive_cha_math = f' `{adaptive_pp}`'
  elif adaptive_cha > anm["cha"]:
    adaptive_cha_math = f' *{anm["cha"]} + {adaptive_cha - anm["cha"]} =* `{adaptive_cha}`'
  else:
    adaptive_cha_math = f' *{anm["cha"]} - {anm["cha"] - adaptive_cha} =* `{adaptive_cha}`'

if "ac" in anm:
  if adaptive_ac == anm["ac"]:
    adaptive_ac_math = f' `{adaptive_ac}`:`{adaptive_kc}`'
  elif adaptive_ac > anm["ac"]:
    adaptive_ac_math = f' *{anm["ac"]} + {adaptive_ac - anm["ac"]} =* `{adaptive_ac}`:`{adaptive_kc}`'
  else:
    adaptive_ac_math = f' *{anm["ac"]} - {anm["ac"] - adaptive_ac} =* `{adaptive_ac}`:`{adaptive_kc}`'

if pursuit_round:
    if attempt_number >= anm["rh"]:
        found_anm_text = f'The {anm_name} might retaliate against {c.name}! This is the last chance!'
    elif attempt_number >= ceil(ceil(anm["rh"] * 3) / 4):
        found_anm_text = f'The {anm_name} is ready to defend itself, it\'s waiting for {c.name}!'
    elif attempt_number >= ceil(ceil(anm["rh"] * 2) / 4):
        found_anm_text = f'The {anm_name} is determined to escape, but {c.name} found a good position!'
    elif attempt_number >= ceil(anm["rh"] / 4):
        found_anm_text = f'{c.name} found the {anm_name} again, it\'s more alert this time!'
else:
  found_anm_text = f'{c.name} has not been detected by the {anm_name}!' if args[0] == "sneak" else f'{c.name} found a good position to observe the {anm_name}!'

pursue_text = f' Do you ...?\n... stalk it: `!hunt sneak`\n... follow the trail: `!hunt track`\n... look for a different animal? `!hunt quit`'

if p == "sneak":
  adv_status = True if pargs.adv() == 1 else False if pargs.adv() == -1 else None
  s_roll = vroll(cs.stealth.d20(base_adv = adv_status))
  succ = s_roll.total > adaptive_pp
  if IS_LIVE == False:
    sneak_test = f'\n*##Test Data: Stealth:`{s_roll.total}` vs PP:*' + adaptive_pp_math
  t = f'{c.name} tries to sneak on their prey!'
  f = f'{c.name} closes on the {anm_name}...|**Stealth roll:** {s_roll.full}{sneak_test}\n{sl if succ else fl}'
  if pursuit_round:
    if wait_time != None:
      f = f'{c.name} is exhausted from so much hunting today...|You have to wait {wait_text} until you can hunt again.'
      f += '\n(Hunting resets at midnight UTC)'
      footer += hvar_before
      c.delete_cvar(HUNT_STAGE_VAR)
      return 1
    else:
      hunt_count += 1
      c.set_cvar(HUNT_TIME_VAR, f'{hunt_count}:{first_hunt_time}')
      footer = footer.replace(f'{hunt_count - 1}/', f'{hunt_count}/')
  if succ:
    thumb = anm["img"]
    stats["s_sneak"] = stats["s_sneak"] + 1 if "s_sneak" in stats else 1
    if "commune" in anm and anm["commune"] == True:
      if "sneak_succ" in anm:
        f2 = anm["sneak_succ"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
      else:
        f2 = f'The {anm_name} has seen you, but they do not seem scared.'
      f2 += '\n' if '|' in f2 else '|'
      f2 += f'Use `!hunt commune` to try to commune with the {anm_name}.'
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, f'{prey_id}:commune:{attempt_number}')
    else:
      f2 = f'{found_anm_text}|Now use `!hunt attack` or `!hunt attack [weapon]` to attack your prey!'
      f2 += "\nAlternatively use `!hunt quit` if you would rather not hunt this prey."
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, f'{prey_id}:attack:{attempt_number}')
  else:
    thumb = image
    if "commune" in anm and anm["commune"] == True:
      f2 = f'The {anm_name} knew exactly where you were! It moves deeper into the wilderness!'
      attempt_number += 1
      stage_value = f'{prey_id}:pursue:{attempt_number}'
      f2 += f'\n{pursue_text}'
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, stage_value) 
    else:
      if "sneak_fail" in anm:
        f2 = anm["sneak_fail"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
      else:
        f2 = f'You lost sight of the {anm_name}...'
      f2 += '\n' if '|' in f2 else '|'
      f2 += 'Better luck next time! Use `!hunt` to try again.'
      footer += hvar_before
      c.delete_cvar(HUNT_STAGE_VAR)
    
elif p == 'track':
  adv_status = True if pargs.adv() == 1 else False if pargs.adv() == -1 else None
  s_roll = vroll(cs.investigation.d20(base_adv = adv_status))
  succ = s_roll.total > adaptive_pp
  if IS_LIVE == False:
    track_test = f'\n*##Test Data: Investigation:{s_roll.total} vs PP:*' + adaptive_pp_math
  t = f'{c.name} follows the tracks of their prey!'
  f = f'{c.name} approaches the {anm_name}...|**Investigation roll:** {s_roll.full}{track_test}\n{sl if succ else fl}'
  if pursuit_round:
    if wait_time != None:
      f = f'{c.name} is exhausted from so much hunting today...|You have to wait {wait_text} until you can hunt again.'
      f += '\n(Hunting resets at midnight UTC)'
      footer += hvar_before
      c.delete_cvar(HUNT_STAGE_VAR)
      return 1
    else:
      hunt_count += 1
      c.set_cvar(HUNT_TIME_VAR, f'{hunt_count}:{first_hunt_time}')
      footer = footer.replace(f'{hunt_count - 1}/', f'{hunt_count}/')
  if succ:
    thumb = anm["img"]
    stats["s_track"] = stats["s_track"] + 1 if "s_track" in stats else 1
    if "commune" in anm and anm["commune"] == True:
      if "sneak_succ" in anm:
        f2 = anm["sneak_succ"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
      else:
        f2 = f'The {anm_name} has seen you, but they do not seem scared.'
      f2 += '\n' if '|' in f2 else '|'
      f2 += f'Use `!hunt commune` to try to commune with the {anm_name}.'
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, f'{prey_id}:commune:{attempt_number}')
    else:
      f2 = f'{found_anm_text}|Now use `!hunt attack` or `!hunt attack [weapon]` to attack your prey!'
      f2 += "\nAlternatively use `!hunt quit` if you would rather not hunt this prey."
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, f'{prey_id}:attack:{attempt_number}')
  else:
    thumb = image
    if "commune" in anm and anm["commune"] == True:
      f2 = f'The {anm_name} was waiting for you! It boldly leaves you deeper into the wilderness!'
      attempt_number += 1
      stage_value = f'{prey_id}:pursue:{attempt_number}'
      f2 += f'\n{pursue_text}'
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, stage_value) 
    else:
      if "sneak_fail" in anm:
        f2 = anm["sneak_fail"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
      else:
        f2 = f'You lost sight of the {anm_name}...'
      f2 += '\n' if '|' in f2 else '|'
      f2 += 'Better luck next time! Use `!hunt` to try again.'
      footer += hvar_before
      c.delete_cvar(HUNT_STAGE_VAR)
    
elif p == 'quit':
  t = f'{c.name} quits hunting the {anm_name}!'
  f = f'You lose sight of the {anm_name}.|But you spend some time admiring the beauty of the nature around you.'
  f += '\nIt is magnificent!'
  footer += hvar_before
  c.delete_cvar(HUNT_STAGE_VAR)
  
elif p == 'commune':
  if not "commune" in anm or anm["commune"] == False:
    f = "!hunt script rolled a 1 and failed flat on its head! Please report to a Server Administrator."
    return 1
  s_roll = vroll(cs.animalHandling.d20())
  succ = s_roll.total > adaptive_cha
  if IS_LIVE == False:
    commune_test = f'\n*##Test Data: Animal Handling:{s_roll.total} vs CHA:*' + adaptive_cha_math
  t = f'{c.name} tries to commune with the {anm_name}...'
  f = f'{c.name} approaches the {anm_name}...|**Animal Handling roll:** {s_roll.full}{commune_test}\n{sl if succ else fl}'
  if succ:
    stats["s_commune"] = stats["s_commune"] + 1 if "s_commune" in stats else 1
    img = anm["img"]
    add_to_bag = {}
    prize_list = ''
    if "prizes" in anm:
      for prize in anm["prizes"]:
        prize_n, prize_qt = prize["name"], prize["qt"]
        add_to_bag[prize_n] = prize_qt
        prize_list += f'{prize_qt}x {prize_n}, '
    prize_list = prize_list[:len(prize_list) - 2]

    if "commune_succ" in anm:
      f2 = anm["commune_succ"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
    else:
      f2 = f'The {anm_name} spends a moment with you, then turns away. The experience enlightens you...'
    f2 += '\n' if '|' in f2 else '|'
    f2 += "You gained: " + prize_list + '.\nThey have been added to your "Hunting" bag!'
    footer += hvar_before
    c.delete_cvar(HUNT_STAGE_VAR)

  else:
    thumb = anm["img"]
    if "commune_fail" in anm:
      f2 = anm["commune_fail"].replace('{char_name}', c.name).replace('{anm_name}', anm_name)
    else:
      f2 = f'The {anm_name} was not impressed! It retreats into the wilderness!'
      f2 += '\n' if '|' in f2 else '|'
    attempt_number += 1
    stage_value = f'{prey_id}:pursue:{attempt_number}'
    f2 += f'\n{pursue_text}'
    footer += hvar_before
    c.set_cvar(HUNT_STAGE_VAR, stage_value)

elif p == 'attack':
  weapon = None
  if len(args) > 1 and len(args[1]) >= 3 and args[1] not in ["adv", "dis", "-b", "-d"]:
    weapon_arg = args[1].lower()
    weapon_str = [a for a in c.attacks
      if str(a).lower().split(':')[0].strip().replace('*', '').startswith(weapon_arg)
    ]
    if len(weapon_str) > 0:
      weapon_str = str(weapon_str[0])
      damage_substring = weapon_str.split('Hit:')[1].strip()
      damage_substring = damage_substring[0:damage_substring.rindex(']') + 1]
      weapon = {
        'name': weapon_str.split(':')[0].strip(),
        'a_bonus': int(weapon_str.split('Attack:')[1].strip().split(' ')[0]),
        'd_die': damage_substring
      }

  a_bonus_param = '+'.join(pargs.get('b', default=[''])).strip()
  a_mod = weapon['a_bonus'] if weapon != None else dexterityMod + proficiencyBonus
  a_die = '2d20kh1' if pargs.adv() == 1 else '2d20kl1' if pargs.adv() == -1 else '1d20'
  a_die = f'{a_die} + {a_mod}'
  a_die = f'{a_die} + {a_bonus_param}' if a_bonus_param != '' else a_die
  a_roll = vroll(a_die)
  crit = a_roll.result.crit == 1

  d_bonus_param = '+'.join(pargs.get('d', default=[''])).strip()
  d_die = weapon["d_die"] if weapon != None else f'1d8+{dexterityMod}'
  d_die = f'{d_die}+{d_bonus_param}' if d_bonus_param != '' else d_die
  d_roll = vroll(d_die)


  a_hit = crit or a_roll.total > adaptive_ac
  dead = crit or (a_hit and (a_roll.total >= adaptive_kc) or (ceil(int(attempt_number) + 1) >= anm["rh"]))
  injured = a_hit and not dead
  damage_dealt = d_roll.total if a_hit and not crit else anm["hp"] if crit else 0
  damage_test = f'\n*## Creature HP:{anm["hp"] - (damage_dealt if damage_dealt <= anm["hp"] else anm["hp"])}/{anm["hp"]}*'
  repeat_limit_test = f'\n*## Kill-on-Hit Meter: `{attempt_number}`/{anm["rh"]}*'
  if IS_LIVE == False:
    attack_test = f'\n*##Test Data: Attack:{a_roll.total} vs AC:*' + adaptive_ac_math + damage_test + repeat_limit_test

  t = f'{c.name} attacks their prey{" with their " + weapon["name"] if weapon != None else ""}!'

  dmg_l = "\n**Miss!**" if not a_hit else "\n**Critical Hit!**" if crit else "\n" + (sl if dead else f'**Hit!**' if injured else fl)

  f = f'Was {c.name} able to kill the {anm_name}?|**Attack roll:** {a_roll.full}{attack_test}{dmg_l}'
  if a_hit:
    thumb = anm["img"]
    stats["t_dmg"] = stats["t_dmg"] + damage_dealt if "t_dmg" in stats else damage_dealt

    if dead:
      stats["s_attack"] = stats["s_attack"] + 1 if "s_attack" in stats else 1
      stage_value = f'{prey_id}:clean:{attempt_number}'
      stage_value += ':lastcrit' if crit else ''
      footer += hvar_before
      c.set_cvar(HUNT_STAGE_VAR, stage_value)
      if crit:
        f2 = f'{c.name} critically hit the {anm_name}! It drops on the spot!'
      else:
        f2 = f'{c.name} manages to kill the {anm_name}.'
      f2 += '|Use `!hunt clean` to clean your prize and collect the goods!'
    else:
      if injured:
        attempt_number += 2
        stage_value = f'{prey_id}:pursue:{attempt_number}' 
        f2 = f'{c.name} injured {anm_name}, it will be easier to track!|{pursue_text}'
        footer += hvar_before
        c.set_cvar(HUNT_STAGE_VAR, stage_value)
  else:
    thumb = image
    if (attempt_number + 1) < anm["rh"]:
        attempt_number += 1
        stage_value = f'{prey_id}:pursue:{attempt_number}'
        f2 = f'The {anm_name} managed to escape your attack and flee...|{pursue_text}!'
        footer += hvar_before
        c.set_cvar(HUNT_STAGE_VAR, stage_value)
    else:
        f2 = f'The {anm_name} escaped!|Better luck next time...'
        footer += hvar_before
        c.delete_cvar(HUNT_STAGE_VAR)
    
# elif p == 'tame':
# if <animal can be tamed>:
#    if <the player level allows taming this animal CR>
#      stage = "tame"
#    else:
#      <you need more experience before this animal can be tamed.>
#  else:
#    <this animal cannot be tamed.>

elif p == 'clean':
  footer += hvar_before
  c.delete_cvar(HUNT_STAGE_VAR)
  t = f'{c.name} attempts to clean their hunting prize!'
  adv_status = True if last_stage_was_crit else None
  s_roll = vroll(cs.survival.d20(base_adv = adv_status))
  clean_default = anm["ac"]
  clean_min = 5
  clean_modifier = attempt_number
  adaptive_clean = ceil(clean_default - (clean_modifier if clean_modifier <= clean_default else clean_default))
  clean_dc = adaptive_clean if adaptive_clean > clean_min else clean_min
  if clean_dc == clean_min:
    clean_dc_math = f' *{clean_default} - {clean_modifier} = ~~{adaptive_clean}~~* `{clean_min}`'
  elif clean_dc < clean_default:
    clean_dc_math = f' *{clean_default} - {clean_modifier} =* `{adaptive_clean}`'
  else:
    clean_dc_math = f' `{clean_default}`'
  succ = s_roll.total > clean_dc
  
  if IS_LIVE == False:
    clean_test = f'\n*##Test Data: Survival:{s_roll.total} vs Clean DC:*' + clean_dc_math
  f = f'{c.name} cleans and extracts the goods from the {anm_name}...|**Survival roll:** {s_roll.full}{clean_test}\n{sl if succ else fl}'
  #natural one
  if s_roll.result.crit == 2:
    thumb = randchoice(hunt_images)
    f2 = f'You ended up wasting the prey you caught...|Better luck next time!'
  #natrual 20
  elif s_roll.result.crit == 1:
    img = anm["img"]
    stats["s_clean"] = stats["s_clean"] + 1 if "s_clean" in stats else 1
    add_to_bag = {}
    prize_list = ''
    if "rations" in anm and anm["rations"] > 0:
      rations = anm["rations"]
      add_to_bag["Rations"] = rations
      prize_list += f'{rations}x Rations, '
    if "prize_base" in anm:
      for prize in anm["prize_base"]:
        prize_bn, prize_bqt = prize["name"], prize["qt"]
        add_to_bag[prize_bn] = prize_bqt
        prize_list += f'{prize_bqt}x {prize_bn}, '
    if "prizes" in anm:
      for prize in anm["prizes"]:
        prize_n, prize_qt = prize["name"], prize["qt"]
        add_to_bag[prize_n] = prize_qt
        prize_list += f'{prize_qt}x {prize_n}, '
    if "prize_crit" in anm:
      for prize in anm["prize_crit"]:
        prize_cn, prize_cqt = prize["name"], prize["qt"]
        add_to_bag[prize_cn] = prize_cqt
        prize_list += f'{prize_cqt}x {prize_cn}, '
    prize_list = prize_list[:len(prize_list) - 2]
    f2 = f'You gained: {prize_list}.|They have been added to your "Hunting" bag!'
  #success
  elif succ:
    img = anm["img"]
    stats["s_clean"] = stats["s_clean"] + 1 if "s_clean" in stats else 1
    add_to_bag = {}
    prize_list = ''
    if "rations" in anm and anm["rations"] > 0:
      rations = anm["rations"]
      add_to_bag["Rations"] = rations
      prize_list += f'{rations}x Rations, '
    if "prize_base" in anm:
      for prize in anm["prize_base"]:
        prize_bn, prize_bqt = prize["name"], prize["qt"]
        add_to_bag[prize_bn] = prize_bqt
        prize_list += f'{prize_bqt}x {prize_bn}, '
    if "prizes" in anm:
      for prize in anm["prizes"]:
        prize_n, prize_qt = prize["name"], prize["qt"]
        add_to_bag[prize_n] = prize_qt
        prize_list += f'{prize_qt}x {prize_n}, '
    prize_list = prize_list[:len(prize_list) - 2]
    f2 = f'You gained: {prize_list}.|They have been added to your "Hunting" bag!'
  #non-natural 1 fail
  else:
    img = anm["img"]
    stats["s_clean"] = stats["s_clean"] + 1 if "s_clean" in stats else 1
    add_to_bag = {}
    prize_list = ''
    if "rations" in anm and anm["rations"] > 0:
      rations = anm["rations"]
      add_to_bag["Rations"] = rations
      prize_list += f'{rations}x Rations, '
    if "prize_base" in anm:
      for prize in anm["prize_base"]:
        prize_bn, prize_bqt = prize["name"], prize["qt"]
        add_to_bag[prize_bn] = prize_bqt
        prize_list += f'{prize_bqt}x {prize_bn}, '
    prize_list = prize_list[:len(prize_list) - 2]
    f2 = f'You gained: {prize_list}.|They have been added to your "Hunting" bag!'


c.set_cvar(HUNT_STATS_VAR, dump_json(stats))

if add_to_bag != None:
  _bag_name = "Hunting"
  _content = add_to_bag

  #! devrae_f add_to_bag (#P "Hunting" #P add_to_bag) !#
  ##### devrae function insert [add_to_bag] #####
  __p0__ = "Hunting"
  __p1__ = add_to_bag
  _bag_name = __p0__
  _content = __p1__

  _cv = character().cvars
  _bags = load_json(_cv["bags"]) if "bags" in _cv else []
  _bag_index = [i for i, x in enumerate(_bags) if x[0] == _bag_name]
  _bag_index = _bag_index[0] if len(_bag_index) > 0 else -1
  if _bag_index == -1:
    _bags.append([_bag_name, {}])
    _bag_index = len(_bags) - 1
  _bag_content = _bags[_bag_index][1]
  for _key in _content:
    if _key in _bag_content:
      _bag_content[_key] = _bag_content[_key] + _content[_key]
    else:
      _bag_content[_key] = _content[_key]
  _bags[_bag_index] = [_bag_name, _bag_content]
  character().set_cvar('bags', dump_json(_bags))

  ##### devrae function end [add_to_bag] #####

</drac2>
-title "{{t}}"
{{f'-image "{img}"' if img else ""}}
{{f'-thumb "{thumb}"' if thumb else ""}}
{{f'-f "{f}"' if f else ""}}
{{f'-f "{f2}"' if f2 else ""}}
{{f'-color "{color}"' if color else ""}}
{{f'-footer "{footer}"' if footer else ""}}